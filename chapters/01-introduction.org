#+TITLE: Ch1 Introduction

# this file is not meant to be exported on its own. see sm-thesis-main.org

* COMMENT Plan
1. current SotA for Kirk / high level executives
   1. identify gaps
2. Define the motivating scenario
3. Prior research on

4. [ ] "limited communication" means you can only communicate at specific times
5. [ ] clock drift / clock skews could also be a source of observation delay!
6. [ ] maybe data center scheduling?
7. [ ] maybe CPU thread scheduling?

** TODO intro to EVAs here? exploration?
** TODO can we include a Portal 2 reference somewhere???
** EVAs and TRL
The current generation concepts of operations and decision support systems for extravehicular
activities (EVAs) cannot cope with the communication delays and dropouts the next generation of
lunar explorers will face while guaranteeing safe and effective exploration. I propose to develop
low TRL technologies that will enable safe and effective planetary exploration through a decision
support system (DSS) for making real-time decisions with distributed collaboration and coordination
under uncertain communications. The lunar surface is a stochastic environment where the information
found during a mission will impact planning. The situation will be fluid, and as such we need a DSS
that enables continuous planning, whether those plans help teams reach unexpected, high value
science targets, or work around unexpected equipment failures - even when they cannot talk to one
another.

This research proposes to address TA 4.4.5, Distributed Collaboration and Coordination, for a
mixed-initiative system of astronauts, robotic assets, and ground-based support personnel during
exploration EVAs. It will build off existing frameworks for decision-making from autonomy that have
enabled robotic missions with analogous constraints. Combined task and motion planning for
autonomous exploration has been well-demonstrated. Similarly, there is a substantial body of work
behind continuous online planning. Distributed, multi-agent decision making has also been addressed,
however, there has not been a look at how uncertain communications impact how a mixed-initiative
team should dynamically adapt and solve problems in an evolving world.

** gaps
The gap in our understanding of distributed collaboration and coordination that this thesis proposes
to address is deciding how a collaborative agent should act, given a set of constraints between
events, when there is uncertainty about when, /if ever/, communications and observations of
exogenous events are received.

** SA vs MA
...to implement the task scheduling and execution capabilities of a high-level executive that is
capable of facilitating swarm-like coordination, where each agent independently decides how to act
based on their knowledge of their peers' actions. In effect, this thesis describes an executive
designed for single-agent task execution that can seamlessly engage in multi-agent execution when
peers share scheduling knowledge.
** example scenario
What the state of the art lacks is an execution strategy when there is observation (or
communication) delay. Existing execution strategies assume that events are either observed
instantaneously as they happen or never. This is a challenge because, for events that are outside of
our control, we no longer have a guarantee of knowing when they have occurred, yet the task
scheduler must decide when to act such that all constraints are satisfied. To illustrate the
challenge posed by uncertain communication on event scheduling, consider the following scenario.

#+begin_quote
There are two robots, =alpha= and =beta=, collaborating to perform a construction task on a
planetary surface. The task involves uploading large video files documenting their progress back to
engineers in Mission Control. There is limited bandwidth to the ground, so they need to coordinate
their usage of the satellite uplink. At some point in the mission, there is a constraint that
=alpha= should wait between three and five minutes after =beta= has finished uploading a video
before uploading their own video. =alpha= knows exactly when =beta= started uploading because they
were colocated at the time, but since then =alpha= has traversed to a distant location. The video
will take eight to ten minutes to upload. =beta= will send a message to inform =alpha= the upload is
complete, which =alpha= may receive instantaneously or after a delay of up to two minutes. Given
when =alpha= learns that =beta= has finished their upload, how should =alpha= decide when to start
their upload?
#+end_quote

There are two constraints and two sources of uncertainty in the scenario, which we can associate
with three events.

1. The event "=beta= finishes upload" will arrive in $[8, 10]$ (minutes) after "=beta= starts
   upload." Neither =alpha= nor =beta= can control where in $[8, 10]$ the upload is finished.
2. =alpha= will decide where the event "=alpha= starts upload" should be scheduled in $[3, 5]$
   after "=beta= finishes upload."
3. The event "=beta= finishes upload" will be observed by =alpha= in $[0, 2]$ after it occurs.
   Neither =alpha= nor =beta= is guaranteed to know how long the delay is.

We can study a few scenarios to uncover the impact of observation uncertainty on =alpha='s decision
as to when to start uploading. We do so based on when =alpha= receives the observation that =beta=
finished their upload. For simplicity's sake, we assume that $t = 0$ when "=beta= starts upload"
occurs.

- At $t = 8$, =alpha= knows there was no observation delay because the only way the observation
  could have come at $t = 8$ is if the video finished uploading at $t = 8$ and they received the
  message from =beta= instantaneously. They are safe to choose anywhere in $[3, 5]$ to start their
  upload. =alpha= chooses to upload as soon as possible at $t = 11$.
- At $t = 9$, the message from =beta= may have been delayed up to a minute (upload finishes at $t =
  8$ + one minute delay), or it could have been sent as late as $t = 9$ and received
  instantaneously. =alpha= then must choose a time in $[3, 5]$ that is consistent with =beta=
  finishing anywhere in $[8, 9]$. =alpha= chooses to upload at $t = 12$.
- At $t = 10$, =beta= could have finished uploading as early as $t = 8$ (upload finishes at $t =
  8$ + two minute delay) or as late as $t = 10$ if there was no communication delay. =alpha= must
  choose a time to start uploading that is consistent with the range of upload completion times in
  $[8, 10]$. =alpha='s only option is to upload at $t = 13$.

** BC
- what will be produced?
  - astronauts need to coordinate. have the problem of communication delay, how can we help them?
  - compare what astronauts would normally do (eg. just using walkie talkies), but we want a digital
    assistant to help them with communications
  - need something to remind astronauts what to do along the way
  - help coordinate with reminders. this is today's practice, this is what it could be
  - what are the deficiencies with today's practice
- Ames executive (PROPEL) (Robinson is a second author). TODO look up "NASA PROPEL"
- need a notion of systems that help you stay on track with task plan
- we're offering basically an advanced version of a smart calendar reminder system
- careful with astronaut vs agent vs executive vs single-agent
  - maybe just stick with astronauts
- "... and same tech is useful for robots who are also doing tasks"
- what claims

need state of the art and the gap


the audience is JSC

*** instead of summary of contributions
thesis
- key contribution: same level of effectiveness of coordination and safety guarantees while being safety aware and being aware of comms
- key insight: can use VDC as the foundation for the executive

aka nikhil offers a theory, we offer an executive

to instantiate it, we need to generalize dynamic execution under uncertainty to handle obs uncertainty and delay
so we need to generalize these three pieces


for some of these innovations, we need

instantiate means adding algorithms, proving safe, benchmark, demonstrate on scenarios
- dispatcher, etc are supporting the digital assistant



problem statement can be more technical




- we advance state of the art:
  1. look at what astronaut currently do. here's something we can give them to do scheduling better.
     if we use state of the art, then it will keep astronauts on track and decide what to do
     dynamically and reason over comms
  2.
** more extra
1. Defining and implementing an execution strategy that is applicable to all outcomes of uncertainty
   when there is variable observation delay.
2. Enacting online, multi-agent coordination through communication.

We take the view that the coordination of multiple agents with observation uncertainty requires that
each agent must act independently without any assumption of a centralized authority dispatching
plans. The first gap effectively defines a single-agent architecture that is useful in its own right
for online scheduling in the face of observation delay. To do so, we build off existing temporal
reasoning procedures for checking the controllability of temporal constraints to include uncertain
observations of events. This procedure naturally informs the design of an execution strategy, or
scheduling algorithm, for deciding when an agent should act given their knowledge of the history of
events that have been scheduled so far. The second gap allows independent scheduling agents to
coordinate their actions through communications, even when those communications may have uncertain
delay. The result is a multi-agent execution architecture that is greater than the sum of its parts.


* Introduction

# ABSTRACT
# As space exploration accelerates and the number of robots and humans working in extreme
# environments grows with it, we must enact autonomous multi-agent coordination in order to safely
# operate in environments that are inherently hostile to communication.

The United States, Europe, private companies, and new space agencies around the world are
collectively urging humanity further into the cosmos with a sense of urgency that has not been seen
since Apollo. We are witness to the great forces of political will, economics, and technological
prowess launching our foothold beyond low Earth orbit and into planetary colonization. From every
perspective, the scale of space exploration is staggering. It will take relentless effort from
untold numbers of people, and our robotic partners, to usher us into the era where interplanetary
travel and living off-world are commonplace. In every envisioned scenario for deep space
exploration, there is a need to coordinate between agents, whether human or robotic, who must find a
way to safely work together in the face of the communication challenges inherent to extreme
environments.

There is good reason to design a system for coordination around the notion of uncertain
communication. We take for granted that communication is easy in our civilized corners of the
Earth's surface. Cellular signals and WiFi are security blankets, tricking us into thinking it must
be easy for /everyone/ to communicate /everywhere/. The fact of the matter is that the communication
is far from a given when you leave civilization. Consider low Earth orbit. The largest artificial
satellite, the International Space Station (ISS), has been in orbit since 1998. Despite that, it
still loses communication with the ground regularly. Satellites with much less robust infrastructure
lose contact with the ground even more often. When astronauts set foot on the South Pole of the Moon
soon as part of the Artemis program,[fn:: https://www.nasa.gov/specials/artemis/] they will find
uncertain satellite coverage and the need to contend against local topology that is hostile to radio
signals [cite:@Coan2020a]. Any robots working near a habitat, or any astronauts collecting samples
nearby, may rely on complicated systems of relays that can provide, at best, unpredictable
communications with nearby /in situ/ agents, let alone Mission Control on Earth. Communications may
be delayed due to passing through multiple relays and the speed of light. Or communications may drop
out altogether when agents accidentally walk behind a big boulder between them and the closest
relay.

The Artemis astronauts will continue a longstanding tradition in the U.S. space program of
performing Extravehicular Activities (EVAs) [cite:@McBarron1994]. Like the Apollo astronauts of the
1960s and 1970s, Artemis astronauts will embark on EVAs wherein crews don spacesuits, egress
landers, and conduct scientific expeditions on the lunar surface. There, they will survey surface
features, collect samples, and in general perform field geology
[cite:@Sonnett1963;@Hurtado2013;@Young2020]. A small number of astronauts are Ph.D. geologists by
trade, and NASA is training others in the principles of field geology up to a notional masters level
of understanding [cite:@Kanelakos2020]. NASA will support the lunar activities of these astronauts
through a vast infrastructure of personnel on the ground, including teams of domain-relevant
scientists. Together with flight controllers and engineers from various disciplines, a science team
on the ground will provide real-time feedback to ensure that Artemis astronauts maximize the
scientific return of their EVAs.

Throughout an EVA, the crew (astronauts with spacesuits on), need to know what to do. Currently,
Mission Control Center (MCC or simply "ground"), a vast infrastructure with hundreds of personnel,
monitors all aspects of EVAs and provides timely guidance to the crew. A key role MCC plays is
keeping the crew on schedule by informing them as to what actions need to be taken and when to take
them [cite:@Miller2017]. Current operations use a mix of manual processes and automated tools[fn::
E.g. [[https://github.com/nasa/maestro]]] for tracking a crew's progress on an EVA timeline. Crews then
rely on verbal communications with MCC, as well as written notes kept on their suits (e.g. Figures
[[fig:bean]] and [[fig:whitson]]), to perform the right actions at the right times. It is not a stretch to
imagine that future spacewalkers will don new spacesuits that feature digital assistants designed to
walk them through procedures. Astronauts may interact with digital assistants through heads up
displays, over voice, or on wrist mounted screens. If communications with MCC are challenged, then
behind a digital assistant will need to be a system capable of providing the same timely advice that
MCC provides today. To do so, it will need to reason over all the actions in an EVA timeline, while
taking into account the current state of what has been done and what needs to be done, in order to
help the crew decide when actions should be performed. We call such a system a /scheduler/.

#+label: fig:bean
#+attr_latex: :width 0.8\textwidth
#+caption: Astronaut Alan Bean on a lunar EVA during Apollo 12. The photographer, astronaut Pete Conrad, can be seen in Bean's helmet. Note Bean's left wrist, which sports a printed EVA timeline with notes about the tasks the crew needed to perform. /Credit: Charles "Pete" Conrad, Apollo 12, NASA/.
[[file:../images/bean_conrad_full.jpg]]

#+label: fig:whitson
#+attr_latex: :width 0.8\textwidth
#+caption: Astronaut Peggy Whitson on an ISS EVA in 2017. Note her left wrist, which sports a printed EVA timeline with notes about the tasks the crew needed to perform. /Credit: NASA ([[https://www.nasa.gov/image-feature/astronaut-peggy-whitson-during-a-spacewalk][source]])/.
file:../images/whitson_full.jpg

#+label: fig:eva-timeline
#+attr_latex: :width \textwidth
#+caption: The summary page from US EVA 22 on ISS. Each column represents a different agent with time increasing from top to bottom. "PET" is the Phased Elapsed Time, or time since the EVA began. Each activity has a time in HH:MM seconds associated with it. SSRMS is the Canadarm. EV1 and EV2 are the two spacewalkers. /Credit: NASA ([[https://www.nasa.gov/sites/default/files/files/US%5fEVA%5f22%5fTimeline.pdf][source]])/
[[file:../images/eva-timeline.png]]

Of course, astronauts never work alone. In addition to communicating with MCC, crews perform EVAs on
a buddy system, meaning two crew members egress and ingress at the same time. At any given moment,
they may be collocated, distant, working independently, or in tight cooperation. Robotic assets also
play a role. On ISS, crews work with manipulators like the Canadarm [cite:@Hiltz]. Rovers and
robotic systems will almost certainly be present on the Moon. They may /collaborate/ in many ways.
Fundamentally, collaboration is a process of deciding when to perform actions based on when other
agents acted. For instance, taking a picture is a form of collaboration. In Figure [[fig:bean]], Pete
Conrad clearly decided when to snap a photo by observing when Alan Bean held up the sample
container. Maybe Conrad saw Bean getting ready and knew when to act. Or, more likely, Bean told
Conrad over the radio that he was ready for a picture, so Conrad should get the camera ready. We
envision that future digital assistants must facilitate similar collaboration. To do so, each agent
will have their own assistant, each running a scheduler that can reason over timing constraints
between their actions and the actions of their peers.

# ABSTRACT
# To the best of our knowledge, there are no autonomous executives capable of coordinating with
# other agents while independently reasoning over communication delay to decide when to act.

The gap in the current state of the art is that, to the best of our knowledge, there is no such
scheduler that is capable of reasoning over the sources of uncertain communication and observation
delay. Existing schedulers assume instantaneous communications, which is unreasonable on the lunar
surface, or indeed, any extreme environment. Furthermore, state of the art schedulers do not provide
collaborative capabilities that allow multiple agents to work together, especially in the presence
of uncertain communication. This thesis leverages and contributes to temporal reasoning research to
implement such a scheduler for multi-agent (MA) collaboration with uncertain communication, which we
refer to as a /delay scheduler/.

# Thus, the envisioned scheduler is one that works for collaborative, distributed agents in the
# presence of uncertain communication.

# ABSTRACT
# A key gap that must be addressed is a single-agent executive capable of deciding when to act given
# communication delay, which can the form the basis for a multi-agent execution context.

# An end-to-end approach would allow a human mission planner to construct a plan for all agents in the
# mission, separate actions for each agent, and then task agents to coordinate during the mission
# despite observation delay. An important stepping stone to the envisioned multi-agent planning and
# execution scenario is defining a single-agent executive that can decide when to act when the
# information it receives, i.e. observations or communications, has uncertain delay. Such a
# single-agent executive is useful in its own right, and can then form the basis for end-to-end
# multi-agent planning and coordination.

# ABSTRACT
# Existing research has provided insights into temporal reasoning, namely modeling observation delay
# and scheduling actions with temporal constraints, but there is both a need for deciding when to
# schedule events when there is uncertain observation delay, and a need to robustly coordinate
# between agents.


# Scheduling actions in the face of uncertainty is a challenge due to the compounding uncertainties
# of uncontrollable exogenous events, unknown observation delay, and uncertain communication between
# agents.




# TODO this EVA stuff here feels out of place
# A real EVA timeline consists of more than six hours of events with constraints between them
# [cite:@McBarron1994]. For any realistic mission, we can expect hundreds of events, with multiple
# agents /in situ/ and on the ground. Human reasoning over temporal constraints is possible,
# This example demonstrates the type of online temporal reasoning over multiple sources of uncertainty
# required from the perspective of a single agent (=alpha= in this case). We could extend decision
# making to a multi-agent context by alternating our perspective to =beta=, who might then need to
# wait for =alpha= to send a message before its next action. With more constraints, compounding
# sources of uncertainty, and more agents cooperating, the decision as to when to act becomes
# increasingly difficult.

# This thesis proposes to address the following high-level gaps that are required in order to define a
# single-agent task scheduling executive that can participate in a multi-agent context.

# ABSTRACT
# This thesis puts forth a series of contributions that culminates in a robust single-agent
# executive demonstrated to run on real hardware with the ability to coordinate in a multi-agent
# context despite observation delay. We show that single agent online scheduler exhibits the
# expected performance characteristics, and demonstrate multi-agent execution with uncertain
# communication in the context of a simulated astronaut and robotic asset collaborating with
# communication delay.

# 2. Extending existing task scheduling algorithms to implement said execution strategy.

For the remainder of the introduction, we present a short summary of each chapter.

** Problem Statement

A delay scheduler can be used in the case of both one agent (e.g. a single astronaut or a robot)
working individually, as well as when multiple agents are collaborating. We start by defining the
problem statement for the single-agent case, before identifying the features that are necessary for
the MA case.

We use tools from temporal reasoning, namely temporal networks [cite:@Dechter1991], to model EVA
timelines as constraints (relationships) between a finite set of events. Some events are under an
agent's control, while others are not. Some events may have associated uncertain observation delay.

At some time $t$ during an EVA, we have a set of events that were /observed/ before $t$. When an
event has been recorded at $t$, we say that it has been /assigned/. If there is no associated
observation delay with an event, then the time of an observation is the same as assignment. If there
is associated observation delay, then it is possible that assignment times are earlier than their
respective observations.

We want a /Real-Time Execution Decision/ (RTED), which consists of unexecuted events and when they
should be performed. Each RTED consists of a set of unexecuted events to be scheduled at a future time.

Our problem statement for the delay scheduler is as follows. For some time $t$ during scheduling,
the delay scheduler should take a temporal network, observation delay, observations thus far, and
assignments so far as input. It should output an RTED.

We expand the previous problem statement to the multi-agent case by adding the notion of agents.
Each agent has their own delay scheduler. As such, each delay scheduler receives a temporal network.
A subset of all events in their temporal network will be received from their peers in the form of
communications. From the perspective of an agent, their peers simply need to be aware of what events
have been assigned. Events that an agent receives from peers are no different than observations.

To be clear, each agent needs their own temporal network. In the EVA domain, we see the same
separation in Figure [[fig:eva-timeline]] where each agent in the EVA has its own set of actions to
perform. While some actions are aligned between agents, there is no assumption that all agents are
working against the same events with the same constraints.

Thus, the multi-agent addition to the problem statement follows. Given event assignments and a set
of peers, all assignments made at $t$ should be immediately communicated to all peers.

** Approach

The architecture of the delay scheduler is designed around the notion of taking everything we know
about set of temporal constraints and when events have been assigned and distilling it down to a
single RTED. There are three key processes in the delay scheduler.

1. an offline process that prepares the scheduler with a given model, including $S$ and $\gammabar$,
2. an online process that records event assignments and shares them with peers, and
3. an online process that generates RTEDs when the scheduler is queried.

#+label: fig:approach-ma-schedulers
#+attr_latex: :width 0.7\textwidth
#+caption: A sample architecture with two delay schedulers collaborating. Each agent receives a single temporal network as input. Observations of the outside world are recorded. Communications relay event assignments to peers. Each agent outputs its own RTED.
[[file:../images/approach-ma-schedulers.png]]

# TODO maybe tie an example of relative communication delay back to satellite dish installation? or is
# that too much detail here? we might have gone off the rails for the approach and touched on problem
# statement instead...
Much like how a flight controller cannot provide guidance on an EVA timeline without an accurate
copy of the EVA timeline, before scheduling begins, the scheduler must be given a model of the
schedule. Such a model will be unique to a given agent and must include all events, the constraints
between events, and the observation delay associated with events. Figure [[fig:approach-ma-schedulers]]
represents this input as a separate model given to each scheduler offline.

During scheduling, schedulers receive observations of events. For a given agent, $a$, observations
come from three sources: actions $a$ has sensed but not controlled ("I reached the installation
location at $t = 5$"), actions $a$ has performed ("I put the tripod down at $t = 6$"), and actions
that have been communicated to $a$ ("It is $t = 15$ and my peer told me their confirmation
arrived"). Figure [[fig:approach-ma-schedulers]] shows observations coming from outside the two
schedulers while communications are passed between them.

As scheduling progress, a digital assistant will want to ask the scheduler for guidance as to when
to act. We represent the delay scheduler's output as an RTED, which can also be seen in Figure
[[fig:approach-ma-schedulers]].

#+label: fig:approach-interfaces
#+attr_latex: :width 0.7\textwidth
#+caption: The three interfaces of a delay scheduler. The first is for initialization, the second is for schedule updates, and the third is for generating RTEDs. The dispatchable form is ultimately the source of truth for when events should be scheduled.
file:../images/approach-interfaces.png

With three distinct processes involved in scheduling, we naturally define three explicit interfaces
on the delay scheduler. Figure [[fig:approach-interfaces]] shows the flow of information between the
interfaces and introduces a new data structure called the /dispatchable form/. In the context of
scheduling, the dispatchable form is a graph structure that acts like a database. Event assignments
are recorded to the dispatchable form, and the dispatchable form can be queried to find the next
RTED. Note that Figure [[fig:approach-interfaces]] is a simplification. The dispatchable form is the key
data structure that make scheduling possible, but an implementation of a scheduler will store forms
of data other than the dispatchable form when events are recorded.

Importantly, the second interface in Figure [[fig:approach-interfaces]], recording, takes both
observations and communications as input. A key idea for the delay dispatcher is that communications
from agents are no different than event observations. Peer schedulers communicate when they have
assigned events, which then received as observations. We shall see that equating communications and
observations allows us to define a single-agent delay scheduler that can be seamlessly integrated in
a multi-agent context.

To enable communications between agents, delay schedulers are networked such that there is a
communication pathway between all agents. We do not assume every agent can communicate with ever
peer, rather when communications are received, they are relayed to all known peers.

** Modeling Temporal Constraints with Uncertain Observations

As stated before, our choice for modeling the "what" and "when" of scheduling is a temporal network,
also called a temporal constraint network [cite:@Dechter1991].

Temporal networks consist of events and constraints. Written in English, events and constraints
might be stated as "samples must be stowed no more than five minutes after being collected." In this
case, =sample-collecting= and =sample-stowing= would be two events. It is the case that mission
planners have a robust set of modeling tools for creating schedules. In the literature, there are
constraints between events we can control [cite:@Dechter1991], events we cannot control
[cite:@Vidal1999], constraints between multiple agents [cite:@Casanova2016], events that may not be
observed [cite:@Moffitt2007], and events with variable observation delay [cite:@Bhargava2018]. We
highlight key components of our chosen modeling framework below.

Our choice of modeling constraints is set-bounded ranges. That is, a constraint between two events,
"sample collecting" and "sample stowing" is represented as
$\edge{\texttt{sample-collecting}}{\texttt{sample-stowing}}{[0, 5]}$. =sample-stowing= must be
scheduled no earlier than $0$ time units beforee and no later than $5$ time units after
=sample-collecting=. This constraint assumes both =sample-collecting= and =sample-stowing= are under
the astronaut's full control. Perhaps the astronauts are working separately with one sample
collection bag shared between them. In that case, an astronaut might need to wait for their buddy to
finish using the bag before stowing samples. If so, then =sample-stowing= is outside their control.
We would then model the constraint as, say,
$\conedge{\texttt{sample-collecting}}{\texttt{sample-stowing}}{[0, 5]}$. Now, the constraint
dictates that =sample-stowing= will happen no later than five minutes after sample collection, but
the astronaut cannot choose (control) when in the next five minutes =sample-stowing= is
scheduled.

Our choice of model for uncertain communication is variable observation delay [cite:@Bhargava2018].
Say there is uncertain communication between the astronauts. Now the communication indicating that
=sample-stowing= can be begin may arrive either immediately, or a minute after it was sent. We model
the delay using a /variable-delay function/, $\gammabar(\texttt{sample-stowing}) = [0, 1]$.
Altogether, the astronaut may receive the communication indicating that =sample-stowing= may begin
instantaneously, or with up to a minute of delay. Key to our model is that the receiver /does not
know how much a message was delayed/. If the message is received at $t = 4$, then the communication
may have been sent at $t = 4$ and received immediately. Or it is possible that it was sent as early
as $t = 3$ and received after a minute delay.

Temporal networks play two key roles in scheduling. First, they allow a modeler to represent the
events and constraints between events of a schedule in a form that a scheduler can ingest. Second,
they can be checked for /controllability/ (also called /consistency/). In order for it to be
possible for a temporal network to be scheduled, there must be a set of assignments for all events
under the agents control that satisfies all constraints in spite of the fact that some events may
arrive late or never at all.

With our choice of modeling constraints with variable observation delay, we perform a
/variable-delay controllablity/ check on temporal networks passed to the delay scheduler. A key
aspect of checking controllability is that we must the temporal network to one with less uncertainty
that is equivalent with respect to controllability. It is this less uncertain form of the temporal
network that we then schedule.

# TODO what experiments?

** Scheduling Events Despite Uncertain Observations

From this point forward, we assume that the scheduler has been given a controllable temporal
network that accurately models the world.

Other researchers have presented single-agent scheduling algorithms for temporal networks with
uncontrollable events [cite:@Hunsberger2013;@Hunsberger2016;], the fastest being FAST-EX
[cite:@Hunsberger2016]. An underlying assumption of existing schedulers is that events are observed
instantaneously, that is $\obs(x_{c}) = \assign(x_{c})$ for some uncontrollable event $x_{c}$.
Events with uncertain observations are incompatible with this assumption, necessitating a change to
the way observations are recorded. The delay scheduler is a modified version of FAST-EX.

In fact, there are broadly two key differences between a delay scheduler and a scheduler that
implements FAST-EX. First, we must account for observation delay when events are observed. For
instance, if we know an observation at time $t$ was delayed by $\gamma$ time units, the assigned
time is then $t - \gamma$. Second, we introduce a new variable to RTEDs, a /no-operation/, or
=no-op=, boolean. Some events in an RTED may be =no-op= for reasons explained below.

When we transform the original temporal network with uncertain observations to one with less
uncertainty, we artificially shrink some of the constraints in the original temporal network. Some
uncontrollable events may arrive earlier or later than expected. We address these situations with
/buffering/ and /imagining/ uncontrollable events. We use the =no-op= addition to RTEDs to simplify
the handling of events that must be buffered or imagined.

#+label: fig:intro-runtime-scheduling
#+attr_latex: :width 0.8\textwidth
#+caption: Total runtime data for scheduling all events in temporal networks with uncertain observations with less than 300 events.
file:../images/scheduling-total-runtime-sub-300.png

We demonstrate that the delay scheduler exhibits the performance characteristics of FAST-EX. At the
core of FAST-EX is a Dijkstra Single Sink/Source Shortest Paths subroutine, which limits the runtime
performance. Each call to the subroutine should have a runtime performance of $O(N \log N)$, where
$N$ is the number of events in the temporal network. Thus, we expect the total runtime to schedule
all events in a temporal network to be $O(N^{2} \log N)$. To evaluate the performance of the delay
scheduler, we scheduled randomly generated temporal networks with a structure inspired by a
satellite dish installation procedure. In the experiments, we model multiple astronauts (up to
eight) working in parallel with inter-agent temporal constraints. Figure
[[fig:intro-runtime-scheduling]] shows that the delay scheduler demonstrates the expected performance
characteristics against said temporal networks.

** An Envisioned Executive for Dispatching Actions with Uncertain Observations

We need a means to connect the RTEDs of a delay scheduler with the actions an agent performs. We
envision that the delay scheduler can serve as the scheduling logic behind an astronaut's digital
assistant, or in the case of a robot, a /task executive/. A task executive should allow a human
modeler to provide constraints as input. The task executive is then charged with generating a plan
and dispatching actions as output.

We integrate the delay scheduler into a high-level task planner known as /Kirk/. We call our variant
of Kirk, /Delay Kirk/. A simplified overview of Delay Kirk's architecture can be found in Figure
[[fig:intro-kirk-architecture]]. Delay Kirk takes the Reactive Model-Based Programming Language (RMPL)
[cite:@RMPL2002], a high-level language for modeling hybrid automata and constraints, as input. It
then creates a temporal plan network and chooses timed actions to execute to satisfy all the goals
as specified in RMPL. It is at this point that the delay scheduler can be integrated into delay
Kirk. With events and temporal constraints between them, the delay scheduler can produce RTEDs and
tell Delay Kirk when to act.

#+label: fig:intro-kirk-architecture
#+attr_latex: :width 0.6\textwidth
#+caption: A high-level overview of the Delay Kirk task executive architecture with respect to dispatching actions.
file:../images/executive-architecture.png

For the purpose of this thesis, planning is out of scope. Instead, we focus on the /delay
dispatcher/ a component that enables an executive to impact an environment by taking actions based
on the RTEDs the delay scheduler produces.

#+label: fig:intro-dispatching-architecture
#+attr_latex: :width 0.6\textwidth
#+caption: A more detailed view of the delay dispatcher architecture.
file:../images/architecture.png

In Figure [[fig:intro-dispatching-architecture]], we introduce a new component, the /driver/. We also
define new variables in order to paint a complete picture of the role the delay dispatcher plays.
$x_{r}$ represents a controllable event. $\obs(x_{r})$ and $\obs(x_{c})$ represent the times that
controllable and uncontrollable events are observed respectively. The actions that the dispatcher
dispatches are mediated through the driver. Essentially, it translates events to commands that cause
actions to happen in the real-world. For a digital assistant, a driver might send a command to
update the heads-up-display in the crew's helmet. For a robot, the driver might publish a ROS
message [cite:@ros].

Note also that Figure [[fig:intro-dispatching-architecture]] presents a different relationship between
the scheduler and observations, which are now passed to the scheduler through the dispatcher. We do
so because in our architecture the dispatcher, not the scheduler, has access to a clock. The
dispatcher takes the responsibility of comparing RTEDs to the clock time and deciding when to act.
Likewise, when events are observed, the dispatcher tells the scheduler when they were observed. This
change has the cumulative effect of giving the dispatcher responsibility for interacting with the
environment.

A key distinction between a normal dispatcher and the delay dispatcher is that not all observed
events are scheduled immediately. if an event should be buffered to a later time, then the
dispatcher has the responsibility of actually waiting until the correct clock time to record the
time in the scheduler.

#+label: fig:intro-tick-runtime
#+attr_latex: :width 0.8\textwidth
#+caption: A comparison of the total runtime to run the dispatcher against the number of events in a temporal network.
file:../images/tick-total-runtime.png

We evaluate the dispatcher's interface that loops and compares the clock time to an RTED to decide
when to act. For this tests, we use the same randomly generated temporal networks as were used when
evaluating the scheduler. Figure [[fig:intro-tick-runtime]] shows the total runtime for all calls to the
dispatcher while scheduling all events in a temporal network. The Dijkstra updates that are
performed when recording events dominates the runtime performance. Given every event is recorded
inside this loop, we see the same $O(N^{2} \log N)$ performance we saw when looking at the total
time to run all schedule updates.

** Multi-Agent Scheduling with Uncertain Observations

Collaboration between agents is enabled by enforcing that communications between agents are treated
the same as uncontrollable event observations. Thus, we are only challenged to define communication
pathways between agents that guarantee agents receive relevant observations. We do so by networking
delay schedulers in a /communication graph/. A communication graph is a simple directed graph that
is used to broadcast event propagation messages between peers.

We evaluate the multi-agent delay scheduler in two simulations. In the first simulation, we run
three instances of Delay Kirk with inter-agent constraints between them. We compare their schedules
to the same schedule that would be produced if one delay scheduler tried to schedule all events for
all three agents. We found that the multi-agent delay dispatchers were able to schedule events while
respecting all inter-agent constraints.

#+label: fig:intro-hw-demo
#+attr_latex: :width \textwidth
#+caption: A hardware demonstration in four parts. (a) $t = 0$, when the two Kirks are started at the same time. (b) $t = 16$, when the astronaut observed that the science experiment was setup. (c) $t = 23$, when the robot received a delayed observation from the astronaut indicating they had completed science setup. (d) $t > 23$, as the robot performed the drilling task.
file:../images/hw-demo-1-quad.png

We finally present a hardware demonstration with a Barrett WAM manipulator being controlled by one
Delay Kirk, with another Delay Kirk representing an astronaut's digital assistant. We demonstrate
that Delay Kirk is able to dispatch actions to the Barrett WAM while receiving communications
representing inter-agent constraints over HTTP.

** COMMENT Summary of Contributions

Here we present the specific contributions of this thesis that are required to address the gaps
presented above.

+ Safe Execution Strategy for Temporal Networks with Uncertain Observation Delay :: Past work on the
  study of temporal networks with variable observation delay has provided a sound and complete
  method for proving the controllability given a set of constraints and uncertain observation delay
  [cite:@Bhargava2018]. We contribute an execution strategy that builds off the controllability
  checker and is valid for all resolutions of uncertainty realized during execution.
+ An Online Scheduler for Temporal Networks with Uncertain Observation Delay :: Past work in
  temporal reasoning has provided a sound and complete online algorithm for dispatching controllable
  events given all other event assignments up to the current time [cite:@Hunsberger2016]. We
  contribute an extension to online scheduling that implements the execution strategy for uncertain
  observation delay.
+ An Online Dispatcher for Dispatching Events to Hardware :: State of the art schedulers are limited
  in that they output execution decisions, which act like instructions as to when to act rather than
  actions themselves [cite:@Hunsberger2016]. We contribute a dispatching algorithm for enacting
  execution decisions on robotic hardware in the face of uncertain observations.
+ Distributed, Multi-Agent Coordination through Uncertain Communications :: We contribute a
  coordination algorithm that allows multiple agents, each using the scheduling and dispatching
  contributions described above, to share knowledge of event observations. The result is a framework
  that enables safe scheduling and dispatching events when there are inter-agent constraints with
  uncertain communication.

** Thesis Structure

The structure of this thesis is as follows. A more detailed problem statement, including
descriptions of the scenarios used for testing distributed collaboration and coordination with
uncertain communication, will be provided in Chapter [[ch:problem-statement]]. Our approach to
addressing the problem statement will be outlined in Chapter [[ch:approach]]. Chapter [[ch:modeling-tn]]
will provide the first technical contributions of this thesis, first by addressing the issue of
modeling observation delay, then by providing a procedure that can be used to guarantee that
temporal constraints with observation delay are satisfiable. Chapter [[ch:delay-scheduling]] expands
existing algorithms for deciding when to act given the resolution of constraints. There, we
contribute a novel strategy for deciding when to act given observation delay. In Chapter
[[ch:technical-executive]], we formalize the components of task scheduling executive that can be
deployed to real hardware. Chapter [[ch:technical-coordination]] finally contributes a multi-agent
coordination architecture for environments with uncertain communication. The discussion in Chapter
[[ch:discussion]] concludes this thesis by providing additional context for the decisions made during
this research.
